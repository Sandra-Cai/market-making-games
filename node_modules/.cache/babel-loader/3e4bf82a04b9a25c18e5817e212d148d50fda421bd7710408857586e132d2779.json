{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nconst initialStats = {\n  totalScore: 0,\n  gamesPlayed: 0,\n  winRate: 0,\n  currentStreak: 0,\n  bestScore: 0,\n  level: 1,\n  totalPlayTime: 0,\n  averageScore: 0,\n  gamesWon: 0,\n  marketMakingScore: 0,\n  probabilityScore: 0,\n  mentalMathScore: 0,\n  strategyScore: 0\n};\nexport const useGameStore = create()(persist((set, get) => ({\n  // Initial state\n  userStats: initialStats,\n  achievements: [],\n  gameHistory: [],\n  currentStreak: 0,\n  bestStreak: 0,\n  currentGame: null,\n  gameInProgress: false,\n  currentScore: 0,\n  gameStartTime: null,\n  theme: 'dark',\n  soundEnabled: true,\n  notificationsEnabled: true,\n  // Actions\n  updateStats: stats => {\n    set(state => {\n      const newStats = {\n        ...state.userStats,\n        ...stats\n      };\n\n      // Calculate derived stats\n      if (newStats.gamesPlayed > 0) {\n        newStats.averageScore = Math.round(newStats.totalScore / newStats.gamesPlayed);\n        newStats.winRate = newStats.gamesWon / newStats.gamesPlayed;\n      }\n\n      // Level progression\n      const newLevel = Math.floor(newStats.totalScore / 1000) + 1;\n      if (newLevel > newStats.level) {\n        newStats.level = newLevel;\n      }\n      return {\n        userStats: newStats\n      };\n    });\n  },\n  addAchievement: achievement => {\n    set(state => {\n      const exists = state.achievements.some(a => a.id === achievement.id);\n      if (!exists) {\n        return {\n          achievements: [...state.achievements, achievement]\n        };\n      }\n      return state;\n    });\n  },\n  startGame: gameType => {\n    set({\n      currentGame: gameType,\n      gameInProgress: true,\n      currentScore: 0,\n      gameStartTime: Date.now()\n    });\n  },\n  endGame: finalScore => {\n    const state = get();\n    const gameDuration = state.gameStartTime ? Date.now() - state.gameStartTime : 0;\n\n    // Update stats\n    const newStats = {\n      ...state.userStats,\n      totalScore: state.userStats.totalScore + finalScore,\n      gamesPlayed: state.userStats.gamesPlayed + 1,\n      totalPlayTime: state.userStats.totalPlayTime + gameDuration,\n      gamesWon: state.userStats.gamesWon + (finalScore > 0 ? 1 : 0)\n    };\n\n    // Update game-specific scores\n    if (state.currentGame) {\n      const gameScoreKey = `${state.currentGame}Score`;\n      newStats[gameScoreKey] = state.userStats[gameScoreKey] + finalScore;\n    }\n\n    // Update streak\n    let newStreak = state.currentStreak;\n    if (finalScore > 0) {\n      newStreak += 1;\n    } else {\n      newStreak = 0;\n    }\n\n    // Add game session\n    const session = {\n      id: Date.now().toString(),\n      gameType: state.currentGame,\n      score: finalScore,\n      duration: gameDuration,\n      timestamp: Date.now(),\n      level: state.userStats.level\n    };\n    set(state => ({\n      userStats: {\n        ...state.userStats,\n        ...newStats\n      },\n      currentStreak: newStreak,\n      bestStreak: Math.max(state.bestStreak, newStreak),\n      gameHistory: [session, ...state.gameHistory.slice(0, 49)],\n      // Keep last 50 sessions\n      currentGame: null,\n      gameInProgress: false,\n      currentScore: 0,\n      gameStartTime: null\n    }));\n\n    // Check for achievements\n    get().checkAchievements();\n  },\n  addGameSession: session => {\n    set(state => ({\n      gameHistory: [session, ...state.gameHistory.slice(0, 49)]\n    }));\n  },\n  toggleTheme: () => {\n    set(state => ({\n      theme: state.theme === 'dark' ? 'light' : 'dark'\n    }));\n  },\n  toggleSound: () => {\n    set(state => ({\n      soundEnabled: !state.soundEnabled\n    }));\n  },\n  toggleNotifications: () => {\n    set(state => ({\n      notificationsEnabled: !state.notificationsEnabled\n    }));\n  },\n  resetProgress: () => {\n    set({\n      userStats: initialStats,\n      achievements: [],\n      gameHistory: [],\n      currentStreak: 0,\n      bestStreak: 0\n    });\n  },\n  checkAchievements: () => {\n    const state = get();\n    const newAchievements = [];\n\n    // First win\n    if (state.userStats.gamesWon === 1) {\n      newAchievements.push({\n        id: 'first_win',\n        title: 'First Victory',\n        description: 'Win your first game',\n        icon: '🏆',\n        unlockedAt: Date.now()\n      });\n    }\n\n    // Streak achievements\n    if (state.currentStreak === 5) {\n      newAchievements.push({\n        id: 'streak_5',\n        title: 'Hot Streak',\n        description: 'Win 5 games in a row',\n        icon: '🔥',\n        unlockedAt: Date.now()\n      });\n    }\n\n    // Score achievements\n    if (state.userStats.totalScore >= 1000) {\n      newAchievements.push({\n        id: 'score_1000',\n        title: 'Score Master',\n        description: 'Reach 1000 total points',\n        icon: '⭐',\n        unlockedAt: Date.now()\n      });\n    }\n\n    // Level achievements\n    if (state.userStats.level >= 5) {\n      newAchievements.push({\n        id: 'level_5',\n        title: 'Level Up',\n        description: 'Reach level 5',\n        icon: '📈',\n        unlockedAt: Date.now()\n      });\n    }\n    newAchievements.forEach(achievement => get().addAchievement(achievement));\n  }\n}), {\n  name: 'market-making-games-storage',\n  partialize: state => ({\n    userStats: state.userStats,\n    achievements: state.achievements,\n    gameHistory: state.gameHistory,\n    currentStreak: state.currentStreak,\n    bestStreak: state.bestStreak,\n    theme: state.theme,\n    soundEnabled: state.soundEnabled,\n    notificationsEnabled: state.notificationsEnabled\n  })\n}));","map":{"version":3,"names":["create","persist","initialStats","totalScore","gamesPlayed","winRate","currentStreak","bestScore","level","totalPlayTime","averageScore","gamesWon","marketMakingScore","probabilityScore","mentalMathScore","strategyScore","useGameStore","set","get","userStats","achievements","gameHistory","bestStreak","currentGame","gameInProgress","currentScore","gameStartTime","theme","soundEnabled","notificationsEnabled","updateStats","stats","state","newStats","Math","round","newLevel","floor","addAchievement","achievement","exists","some","a","id","startGame","gameType","Date","now","endGame","finalScore","gameDuration","gameScoreKey","newStreak","session","toString","score","duration","timestamp","max","slice","checkAchievements","addGameSession","toggleTheme","toggleSound","toggleNotifications","resetProgress","newAchievements","push","title","description","icon","unlockedAt","forEach","name","partialize"],"sources":["/Users/sandracai/market-making-games-cursor/market-making-games-4/src/store/gameStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { GameStats, GameType, Achievement, GameSession } from '../types/game';\n\ninterface GameState {\n  // User data\n  userStats: GameStats;\n  achievements: Achievement[];\n  gameHistory: GameSession[];\n  currentStreak: number;\n  bestStreak: number;\n\n  // Game state\n  currentGame: GameType | null;\n  gameInProgress: boolean;\n  currentScore: number;\n  gameStartTime: number | null;\n\n  // UI state\n  theme: 'dark' | 'light';\n  soundEnabled: boolean;\n  notificationsEnabled: boolean;\n\n  // Actions\n  updateStats: (stats: Partial<GameStats>) => void;\n  addAchievement: (achievement: Achievement) => void;\n  startGame: (gameType: GameType) => void;\n  endGame: (finalScore: number) => void;\n  addGameSession: (session: GameSession) => void;\n  toggleTheme: () => void;\n  toggleSound: () => void;\n  toggleNotifications: () => void;\n  resetProgress: () => void;\n  checkAchievements: () => void;\n}\n\nconst initialStats: GameStats = {\n  totalScore: 0,\n  gamesPlayed: 0,\n  winRate: 0,\n  currentStreak: 0,\n  bestScore: 0,\n  level: 1,\n  totalPlayTime: 0,\n  averageScore: 0,\n  gamesWon: 0,\n  marketMakingScore: 0,\n  probabilityScore: 0,\n  mentalMathScore: 0,\n  strategyScore: 0,\n};\n\nexport const useGameStore = create<GameState>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      userStats: initialStats,\n      achievements: [],\n      gameHistory: [],\n      currentStreak: 0,\n      bestStreak: 0,\n      currentGame: null,\n      gameInProgress: false,\n      currentScore: 0,\n      gameStartTime: null,\n      theme: 'dark',\n      soundEnabled: true,\n      notificationsEnabled: true,\n\n      // Actions\n      updateStats: (stats) => {\n        set((state) => {\n          const newStats = { ...state.userStats, ...stats };\n\n          // Calculate derived stats\n          if (newStats.gamesPlayed > 0) {\n            newStats.averageScore = Math.round(newStats.totalScore / newStats.gamesPlayed);\n            newStats.winRate = newStats.gamesWon / newStats.gamesPlayed;\n          }\n\n          // Level progression\n          const newLevel = Math.floor(newStats.totalScore / 1000) + 1;\n          if (newLevel > newStats.level) {\n            newStats.level = newLevel;\n          }\n\n          return { userStats: newStats };\n        });\n      },\n\n      addAchievement: (achievement) => {\n        set((state) => {\n          const exists = state.achievements.some((a) => a.id === achievement.id);\n          if (!exists) {\n            return { achievements: [...state.achievements, achievement] };\n          }\n          return state;\n        });\n      },\n\n      startGame: (gameType) => {\n        set({\n          currentGame: gameType,\n          gameInProgress: true,\n          currentScore: 0,\n          gameStartTime: Date.now(),\n        });\n      },\n\n      endGame: (finalScore) => {\n        const state = get();\n        const gameDuration = state.gameStartTime ? Date.now() - state.gameStartTime : 0;\n\n        // Update stats\n        const newStats = {\n          ...state.userStats,\n          totalScore: state.userStats.totalScore + finalScore,\n          gamesPlayed: state.userStats.gamesPlayed + 1,\n          totalPlayTime: state.userStats.totalPlayTime + gameDuration,\n          gamesWon: state.userStats.gamesWon + (finalScore > 0 ? 1 : 0),\n        };\n\n        // Update game-specific scores\n        if (state.currentGame) {\n          const gameScoreKey = `${state.currentGame}Score` as keyof GameStats;\n          newStats[gameScoreKey] = state.userStats[gameScoreKey] + finalScore;\n        }\n\n        // Update streak\n        let newStreak = state.currentStreak;\n        if (finalScore > 0) {\n          newStreak += 1;\n        } else {\n          newStreak = 0;\n        }\n\n        // Add game session\n        const session: GameSession = {\n          id: Date.now().toString(),\n          gameType: state.currentGame!,\n          score: finalScore,\n          duration: gameDuration,\n          timestamp: Date.now(),\n          level: state.userStats.level,\n        };\n\n        set((state) => ({\n          userStats: { ...state.userStats, ...newStats },\n          currentStreak: newStreak,\n          bestStreak: Math.max(state.bestStreak, newStreak),\n          gameHistory: [session, ...state.gameHistory.slice(0, 49)], // Keep last 50 sessions\n          currentGame: null,\n          gameInProgress: false,\n          currentScore: 0,\n          gameStartTime: null,\n        }));\n\n        // Check for achievements\n        get().checkAchievements();\n      },\n\n      addGameSession: (session) => {\n        set((state) => ({\n          gameHistory: [session, ...state.gameHistory.slice(0, 49)],\n        }));\n      },\n\n      toggleTheme: () => {\n        set((state) => ({ theme: state.theme === 'dark' ? 'light' : 'dark' }));\n      },\n\n      toggleSound: () => {\n        set((state) => ({ soundEnabled: !state.soundEnabled }));\n      },\n\n      toggleNotifications: () => {\n        set((state) => ({ notificationsEnabled: !state.notificationsEnabled }));\n      },\n\n      resetProgress: () => {\n        set({\n          userStats: initialStats,\n          achievements: [],\n          gameHistory: [],\n          currentStreak: 0,\n          bestStreak: 0,\n        });\n      },\n\n      checkAchievements: () => {\n        const state = get();\n        const newAchievements: Achievement[] = [];\n\n        // First win\n        if (state.userStats.gamesWon === 1) {\n          newAchievements.push({\n            id: 'first_win',\n            title: 'First Victory',\n            description: 'Win your first game',\n            icon: '🏆',\n            unlockedAt: Date.now(),\n          });\n        }\n\n        // Streak achievements\n        if (state.currentStreak === 5) {\n          newAchievements.push({\n            id: 'streak_5',\n            title: 'Hot Streak',\n            description: 'Win 5 games in a row',\n            icon: '🔥',\n            unlockedAt: Date.now(),\n          });\n        }\n\n        // Score achievements\n        if (state.userStats.totalScore >= 1000) {\n          newAchievements.push({\n            id: 'score_1000',\n            title: 'Score Master',\n            description: 'Reach 1000 total points',\n            icon: '⭐',\n            unlockedAt: Date.now(),\n          });\n        }\n\n        // Level achievements\n        if (state.userStats.level >= 5) {\n          newAchievements.push({\n            id: 'level_5',\n            title: 'Level Up',\n            description: 'Reach level 5',\n            icon: '📈',\n            unlockedAt: Date.now(),\n          });\n        }\n\n        newAchievements.forEach((achievement) => get().addAchievement(achievement));\n      },\n    }),\n    {\n      name: 'market-making-games-storage',\n      partialize: (state) => ({\n        userStats: state.userStats,\n        achievements: state.achievements,\n        gameHistory: state.gameHistory,\n        currentStreak: state.currentStreak,\n        bestStreak: state.bestStreak,\n        theme: state.theme,\n        soundEnabled: state.soundEnabled,\n        notificationsEnabled: state.notificationsEnabled,\n      }),\n    },\n  ),\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}